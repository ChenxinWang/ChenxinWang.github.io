<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Now&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-07T13:56:08.477Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Now</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>此篇没有标题</title>
    <link href="http://yoursite.com/2017/12/07/%E6%AD%A4%E7%AF%87%E6%B2%A1%E6%9C%89%E6%A0%87%E9%A2%98/"/>
    <id>http://yoursite.com/2017/12/07/此篇没有标题/</id>
    <published>2017-12-07T13:37:45.000Z</published>
    <updated>2017-12-07T13:56:08.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载请注明原博客地址"><a href="#转载请注明原博客地址" class="headerlink" title="转载请注明原博客地址"></a>转载请注明原博客地址</h2><p>实验<a href="https://github.com/metalbubble/CAM" target="_blank" rel="noopener">CAM</a>的代码时候为了测试大量图片而写了点愚蠢的代码。不得不说有时候不写写代码还真的发现不了自己的思维死角。由于要测试大量图片，没仔细思考就直接在整个代码外套了个循环。。。。。。然后程序不断奔溃。-_-||</p><p>精简后的原代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br><span class="line">addpath(&apos;/home/wcx/caffe/matlab&apos;);</span><br><span class="line"></span><br><span class="line">for imgID=1:1125</span><br><span class="line">    net_weights = [&apos;models/imagenet_googleletCAM_train_iter_120000.caffemodel&apos;];</span><br><span class="line">    net_model = [&apos;models/deploy_googlenetCAM.prototxt&apos;];</span><br><span class="line">    net = caffe.Net(net_model, net_weights, &apos;test&apos;);</span><br><span class="line">    caffe.set_mode_gpu();</span><br><span class="line">    caffe.set_device(0);</span><br><span class="line">    weights_LR = net.params(&apos;CAM_fc&apos;,1).get_data();</span><br><span class="line"></span><br><span class="line">    img = imread([&apos;keyframe/&apos; num2str(imgID) &apos;.png&apos;]);</span><br><span class="line">    [height_original,weight_original,temp]=size(img);</span><br><span class="line">    img = imresize(img, [256 256]);</span><br><span class="line">    scores = net.forward(&#123;prepare_image(img)&#125;);</span><br><span class="line">    activation_lastconv = net.blobs(&apos;CAM_conv&apos;).get_data();</span><br><span class="line">    scores = scores&#123;1&#125;;</span><br><span class="line">    caffe.reset_all();</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>老老实实设条件断点定位到每次崩溃停在<code>net = caffe.Net(net_model, net_weights, &#39;test&#39;)</code>。</p><p>然后瞬间怀疑是缓存冗余过多，试着加了clear但没有任何效果。于是看了一段时间matlab如何回收内存，学了许多骚操作，能用的一个都没。同时发现我clear位置还写错了，调整了下在每次循环前clear一下来清除工作空间，然而并没什么卵用。原本预想这样做会非常有用，因为每次循环结束都清除了工作空间和caffe网络，按道理效果和重新运行程序差不多了。后来在网上发现有人解释说matlab清除工作空间后虽然释放了内存，但释放后的空间是碎片化的，即使空间都释放了也没法装入比碎片大的内存块，我豁然开朗，觉得计组和操作系统还是很有用的。</p><p>然后在日常debug的时候瞥了下shell发现了点神奇的玩意：<br><code>Check failed: error == cudaSuccess (2 vs. 0) out of memory</code><br>这个<code>out of memory</code>很有意思，有了关键字后在stackoverflow上找到了个<a href="https://stackoverflow.com/questions/33790366/caffe-check-failed-error-cudasuccess-2-vs-0-out-of-memory#" target="_blank" rel="noopener">回答</a>。试着在shell下执行nvidia-smi，发现崩溃的时候Memory-Usage已经跑满了。</p><p>至此bug原因get，bug原因大概是循环中途多次重新加载网络，使得剩余内存越来越碎片化导致matlab不得不不断开辟新的内存空间直到GPU memory耗尽。然后改了循环后整个人都神清气爽了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br><span class="line">addpath(&apos;/home/wcx/caffe/matlab&apos;);</span><br><span class="line"></span><br><span class="line">net_weights = [&apos;models/imagenet_googleletCAM_train_iter_120000.caffemodel&apos;];</span><br><span class="line">net_model = [&apos;models/deploy_googlenetCAM.prototxt&apos;];</span><br><span class="line">net = caffe.Net(net_model, net_weights, &apos;test&apos;);</span><br><span class="line">caffe.set_mode_gpu();</span><br><span class="line">caffe.set_device(0);</span><br><span class="line">weights_LR = net.params(&apos;CAM_fc&apos;,1).get_data();</span><br><span class="line"></span><br><span class="line">for imgID=1:1125</span><br><span class="line">    img = imread([&apos;keyframe/&apos; num2str(imgID) &apos;.png&apos;]);</span><br><span class="line">    [height_original,weight_original,temp]=size(img);</span><br><span class="line">    img = imresize(img, [256 256]);</span><br><span class="line">    scores = net.forward(&#123;prepare_image(img)&#125;);</span><br><span class="line">    activation_lastconv = net.blobs(&apos;CAM_conv&apos;).get_data();</span><br><span class="line">    scores = scores&#123;1&#125;;</span><br><span class="line">end</span><br><span class="line">caffe.reset_all();</span><br></pre></td></tr></table></figure></p><p>所以平时还是得多写写代码积累经验吧，唉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;转载请注明原博客地址&quot;&gt;&lt;a href=&quot;#转载请注明原博客地址&quot; class=&quot;headerlink&quot; title=&quot;转载请注明原博客地址&quot;&gt;&lt;/a&gt;转载请注明原博客地址&lt;/h2&gt;&lt;p&gt;实验&lt;a href=&quot;https://github.com/metalbub
      
    
    </summary>
    
    
      <category term="日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Github+hexo搭建博客（填坑）</title>
    <link href="http://yoursite.com/2017/11/24/Github+hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%A1%AB%E5%9D%91%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/24/Github+hexo搭建博客（填坑）/</id>
    <published>2017-11-24T15:17:25.000Z</published>
    <updated>2017-12-07T13:56:14.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载请注明原博客地址"><a href="#转载请注明原博客地址" class="headerlink" title="转载请注明原博客地址"></a>转载请注明原博客地址</h2><p>目录</p><ul><li>前言<ul><li>准备工作</li><li>搭建过程</li></ul></li><li>填坑<ul><li>注册Github</li><li>创建仓库</li><li>配置SSH key</li><li>安装Hexo</li><li>配置Hexo</li><li>发布文章</li></ul></li><li>其他</li></ul><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><strong>1. 前言</strong></h1><p>搭博客前观望了很久，想来想去最后还是用了Github，不得不说用Github搭真的非常方便。要准备的东西不多，仅仅需要Github账号，Git客户端还有Node.js。网上有非常详细的搭建过程，这里就不详讲了，仅简单说下过程然后贴上我参考的博客：<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">手把手教你用Hexo+Github 搭建属于自己的博客</a>。</p><h2 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1. 准备工作"></a>1.1. 准备工作</h2><ul><li><a href="https://github.com/" target="_blank" rel="noopener">注册Github</a></li><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载Git</a></li><li><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">下载Node.js</a></li></ul><h2 id="1-2-搭建过程"><a href="#1-2-搭建过程" class="headerlink" title="1.2. 搭建过程"></a>1.2. 搭建过程</h2><ul><li>注册Github</li><li>创建仓库</li><li>配置SSH key</li><li>安装Hexo</li><li>配置Hexo</li><li>发布文章</li></ul><h1 id="2-填坑"><a href="#2-填坑" class="headerlink" title="2. 填坑"></a><strong>2. 填坑</strong></h1><h2 id="2-1-注册Github"><a href="#2-1-注册Github" class="headerlink" title="2.1. 注册Github"></a>2.1. 注册Github</h2><p>按照提示慢慢来就好，注册完后默认公开邮箱，如果想要隐藏自己的邮箱的话点自己头像找到Settings点进去。找打Emails选项，找到<code>Keep my email address private</code>并打勾，<code>Block command line pushes that expose my email</code>前面的勾取消，不取消的话会在部署的时候阻止部署并提示你的邮箱是private需要改成public等等。(神烦，找了一晚上才找打这个问题)</p><ul><li style="list-style: none"><input type="checkbox" checked> Keep my email address private</li><li style="list-style: none"><input type="checkbox"> Block command line pushes that expose my email</li></ul><h2 id="2-2-创建仓库"><a href="#2-2-创建仓库" class="headerlink" title="2.2 创建仓库"></a>2.2 创建仓库</h2><p>唯一需要注意的是仓库名严格按照<code>yourname.github.io</code>格式，其中<code>yourname</code>是自己的username，其他默认就行。</p><h2 id="2-3-配置SSH-key"><a href="#2-3-配置SSH-key" class="headerlink" title="2.3 配置SSH key"></a>2.3 配置SSH key</h2><p>注意要正确配置好SSH key防止部署Hexo时报错。<br>Bash下输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure></p><p>其中<code>username</code>与<code>email</code>是自己的Github用户名与邮箱。然后输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure></p><p>然后一路默认就好，最后将生成的公匙添加到github上。其他的详情见<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">Connecting to GitHub with SSH</a>。</p><h2 id="2-4-安装Hexo"><a href="#2-4-安装Hexo" class="headerlink" title="2.4 安装Hexo"></a>2.4 安装Hexo</h2><p>可能最麻烦的步骤就是这里了，因为官方源非常慢，经常下载一半停止，强行退出后需要<strong>强制</strong>清理下缓存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure></p><p>更改源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry &quot;https://registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure></p><p>安装<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官方文档</a>步骤安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>打开你要放博客的位置初始化Hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></p><p>该命令在当前路径下创建一个blog文件夹并在内完成初始化。进入blog文件夹安装Hexo扩展：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>到此Hexo就安装完了。blog里文件的详细介绍可以看<a href="https://hexo.io/docs/setup.html" target="_blank" rel="noopener">Hexo官方文档</a>。</p><h2 id="2-5-配置Hexo"><a href="#2-5-配置Hexo" class="headerlink" title="2.5 配置Hexo"></a>2.5 配置Hexo</h2><p>主要是修改<code>./blog</code>文件夹下的<code>_config.yml</code>文件里<code>Deployment</code>的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>前者为SSH形式，后者为https形式。</p><h2 id="2-6-发布文章"><a href="#2-6-发布文章" class="headerlink" title="2.6 发布文章"></a>2.6 发布文章</h2><p>首先安装扩展，防止发布文章时报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>用以下命令部署Hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; d -g</span><br></pre></td></tr></table></figure></p><p>第一次部署可能会让你登录Github，如果Github里设置了邮箱隐藏而且<code>Block command line pushes that expose my email</code>前面的勾未取消会导致部署被阻止。<br>发布文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;article&quot;</span><br></pre></td></tr></table></figure></p><p>在<code>./source/_posts</code>路径下将会看到<code>article.md</code>文件。编辑完该文件后需要重新部署：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a><strong>3. 其他</strong></h1><p>其他一些Hexo用法可以参照<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官方文档</a>，例如更换主题等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;转载请注明原博客地址&quot;&gt;&lt;a href=&quot;#转载请注明原博客地址&quot; class=&quot;headerlink&quot; title=&quot;转载请注明原博客地址&quot;&gt;&lt;/a&gt;转载请注明原博客地址&lt;/h2&gt;&lt;p&gt;目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前言&lt;ul&gt;
&lt;li&gt;准备工作&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
