<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Now&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-14T12:56:17.987Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Now</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python切片操作的一些问题</title>
    <link href="http://yoursite.com/2017/12/14/Python%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/12/14/Python切片操作的一些问题/</id>
    <published>2017-12-14T12:46:01.000Z</published>
    <updated>2017-12-14T12:56:17.987Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>今天看到个有意思的问题:<br>有以下代码片段，问输出是什么。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</span><br><span class="line">print(a[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure></p><p>试了下输出是<code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;]</code><br>很明显索引值越界了，但是这里有个切片操作导致有输出结果而不报错。然后又试了下<code>print(a[6:])</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</span><br><span class="line">print(a[<span class="number">5</span>:])</span><br></pre></td></tr></table></figure></p><p>输出是<code>[]</code>。<br>上网查了下找到了<a href="http://www.cnblogs.com/ifantastic/archive/2013/04/15/3021845.html" target="_blank" rel="noopener">“Python 序列的切片操作与技巧”</a>这篇博文的一个解释，不过仍有些难以说清的问题：<br>切片的方法是<code>consequence[start_index: stop_index: step]</code>。<br><code>start_index</code>默认为0或者<code>-len(consequence)</code>。<br><code>stop_index</code>默认为<code>len(consequence)-1</code>或者-1。<br><code>step</code>默认为1。<br>其中切片结果包含索引值为<code>start_index</code>的对象但不包含索引值为<code>stop_index</code>的对象。<br>当输入的索引值超出<code>[-len(consequence), len(consequence)-1]</code>这个区间时会被置为相应的缺省值。但是按照这个解释，<code>a[:5]</code>会被缺省为<code>a[:len(consequence)-1]</code>,输出应该是<code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]</code>。另外按照个缺省值的说法，<code>a[:]</code>会被缺省为<code>a[0:len(consequence)-1]</code>与实际的结果也不符。同样的，上述解释也无法说明<code>a[5:]</code>的结果为空的原因。<br>按照<a href="http://blog.csdn.net/xpresslink/article/details/77727507" target="_blank" rel="noopener">“全面深入彻底理解Python切片操作”</a>这篇博文所说的，切片操作中存在元素的逻辑位置关系。按照这个思路就比较好理解<code>a[5:]</code>结果为空的原因了，因为没有对象可取，所以返回了一个空列表。同样的，如<code>a[2:2]</code>，<code>a[3:2]</code>之类的也是这个原因。<br>对于切片的缺省值问题，在<a href="https://docs.python.org/3/library/functions.html?highlight=slice#slice" target="_blank" rel="noopener">Python的文档</a>里找到了解释：</p><blockquote><p>class slice(stop)<br>class slice(start, stop[, step])<br>Return a slice object representing the set of indices specified by range(start, stop, step). The start and step arguments default to None. Slice objects have read-only data attributes start, stop and step which merely return the argument values (or their default). They have no other explicit functionality; however they are used by Numerical Python and other third party extensions. Slice objects are also generated when extended indexing syntax is used. For example: a[start:stop:step] or a[start:stop, i]. See itertools.islice() for an alternate version that returns an iterator.</p></blockquote><p>以及<a href="https://docs.python.org/3/reference/expressions.html?highlight=slice" target="_blank" rel="noopener">文档对Slicings的说明</a>：</p><blockquote><p>A slicing selects a range of items in a sequence object (e.g., a string, tuple or list). Slicings may be used as expressions or as targets in assignment or del statements. The syntax for a slicing:<br>slicing      ::=  primary “[“ slice_list “]”<br>slice_list   ::=  slice_item (“,” slice_item)* [“,”]<br>slice_item   ::=  expression | proper_slice<br>proper_slice ::=  [lower_bound] “:” [upper_bound] [ “:” [stride] ]<br>lower_bound  ::=  expression<br>upper_bound  ::=  expression<br>stride       ::=  expression<br>There is ambiguity in the formal syntax here: anything that looks like an expression list also looks like a slice list, so any subscription can be interpreted as a slicing. Rather than further complicating the syntax, this is disambiguated by defining that in this case the interpretation as a subscription takes priority over the interpretation as a slicing (this is the case if the slice list contains no proper slice).<br>The semantics for a slicing are as follows. The primary is indexed (using the same __getitem__() method as normal subscription) with a key that is constructed from the slice list, as follows. If the slice list contains at least one comma, the key is a tuple containing the conversion of the slice items; otherwise, the conversion of the lone slice item is the key. The conversion of a slice item that is an expression is that expression. The conversion of a proper slice is a slice object (see section The standard type hierarchy) whose start, stop and step attributes are the values of the expressions given as lower bound, upper bound and stride, respectively, substituting None for missing expressions.</p></blockquote><p>缺省值严格来说是下界，上界和None。但这也不好解释<code>a[:]</code>的结果。<br>按我的理解，下界是0，但上界应该与数学分析里的上界类似，所有不小于列表a的最大索引值的数都是上界，而不是上确界，即列表a的最大索引值。在本文的例子中，列表最大索引值是4，那么，只要是大于4的索引值，不管是5，6或者更大的数，对于切片都是一样的，不妨把这个索引值定义为<code>&quot;MAX&quot;</code>。那么<code>a[:]</code>相当于<code>a[0:MAX]</code>，但<code>&quot;MAX&quot;</code>值始终比4大，所以切片的结果就包含了列表最后一个元素，也就是结果为<code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;]</code>。而<code>a[:5]</code>相当于<code>a[0:MAX]</code>，结果也就是<code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;]</code>了。至于<code>a[5:]</code>，它相当于<code>a[MAX:MAX]</code>，按照元素的逻辑位置的思路，它没有对象可以取得，因此返回了一个空列表<code>[]</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;今天看到个有意思的问题:&lt;br&gt;有以下代码片段，问输出是什么。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>几种不同分类器对同一数据集的分类实现</title>
    <link href="http://yoursite.com/2017/12/13/%E5%87%A0%E7%A7%8D%E4%B8%8D%E5%90%8C%E5%88%86%E7%B1%BB%E5%99%A8%E5%AF%B9%E5%90%8C%E4%B8%80%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%88%86%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/12/13/几种不同分类器对同一数据集的分类实现/</id>
    <published>2017-12-13T13:48:38.000Z</published>
    <updated>2017-12-14T12:55:59.606Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现我学习机器学习的顺序不太对劲，之前先学了CNN和各种深度学习框架然后才开始看一些正常的分类器。。。不过话说回来，这样顺序导致我现在看这些分类器原理和实现轻松多了。<br><a id="more"></a><br>对同一数据集实验了SVM,DecisionTree,RandomForest以及BP神经网络的效果。<br>前三者使用了Python的sklearn包,写起来非常简单和套模板差不多，BP神经网络用MATLAB实现。<br>| 排序方法 | 平均情况 | 最好情况 | 最坏情况 | 辅助空间 | 稳定性 |<br>|:—–|:—–|:—–|:—–|:—–|:—–|<br>| 冒泡排序 | O(n²) | O(nlogn) | O(n²) | O(1) | 稳定 |<br>| 简单选择 | O(n²) | O(n²) | O(n²) | O(1) | 稳定 |<br>| 直接插入 | O(n²) | O(n) | O(n²) | O(1) | 稳定 |<br>| 希尔排序 | O(nlogn)~O(n²) | O(n^1.3) | O(n²) | O(1) | 不稳定 |<br>| 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 不稳定 |<br>| 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(n) | 不稳定 |<br>| 快速排序 | O(nlogn) | O(nlogn) | O(n²) | O(nlogn)~O(n) | 不稳定 |<br>数据格式如下：<br>|    p1   |    p2   |    p3   |    p4   |    p5   |    p6   |  lable  |<br>|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|10.922591|5.277203 |0.598352 |0.098681 |81.359452|1.743723 |1        |<br>|51.273865|1.185470 |12.368892|14.047521|19.579670|1.544585 |3        |<br>|60.631204|3.646800 |1.551297 |0.649149 |32.781753|0.739799 |2        |<br>以下是代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SVM</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> SVM</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.loadtxt(<span class="string">'./data.txt'</span>, dtype=float, delimiter=<span class="string">' '</span>)</span><br><span class="line">x, y = np.split(data, (<span class="number">6</span>,), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">clf = svm.SVC()</span><br><span class="line">clf.fit(x, y.ravel())</span><br><span class="line"></span><br><span class="line">y_predict = clf.predict(x)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DecisionTree</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">'./data.txt'</span>, dtype=float, delimiter=<span class="string">' '</span>)</span><br><span class="line">x, y = np.split(data, (<span class="number">6</span>,), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">clf = tree.DecisionTreeClassifier()</span><br><span class="line">clf.fit(x, y.ravel())</span><br><span class="line"></span><br><span class="line">y_predict = clf.predict(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RandomForest</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> ensemble</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">'./data.txt'</span>, dtype=float, delimiter=<span class="string">','</span>)</span><br><span class="line">x, y = np.split(data, (<span class="number">6</span>,), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">clf = ensemble.RandomForestClassifier()</span><br><span class="line">clf.fit(x, y.ravel())</span><br><span class="line"></span><br><span class="line">y_predict = clf.predict(x)</span><br></pre></td></tr></table></figure><p>其中<code>svm.SVC()</code>,<code>tree.DecisionTreeClassifier()</code>以及<code>ensemble.RandomForestClassifier()</code>这三个函数可以调整参数，不过在这个数据集上效果不如默认的参数。<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% BPNN</span></span><br><span class="line">clear all</span><br><span class="line">data = load(<span class="string">'./data.txt'</span>);</span><br><span class="line">[input, minI, maxI] = premnmx([data(:, <span class="number">1</span>), data(:, <span class="number">2</span>), data(:, <span class="number">3</span>), data(:, <span class="number">4</span>), data(:, <span class="number">5</span>), data(:, <span class="number">6</span>)]');</span><br><span class="line"></span><br><span class="line">output = <span class="built_in">zeros</span>(<span class="built_in">length</span>(data(:, <span class="number">7</span>)), <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(data(:, <span class="number">7</span>))</span><br><span class="line">    output(<span class="built_in">i</span>, data(<span class="built_in">i</span>, <span class="number">7</span>)) = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">net = newff(input, output', <span class="number">20</span>);</span><br><span class="line">net = train(net, input, output');</span><br><span class="line"></span><br><span class="line">testInput = tramnmx([data(:, <span class="number">1</span>), data(:, <span class="number">2</span>), data(:, <span class="number">3</span>), data(:, <span class="number">4</span>), data(:, <span class="number">5</span>), data(:, <span class="number">6</span>)]', minI, maxI);</span><br><span class="line"></span><br><span class="line">Y = sim(net, testInput);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:max(<span class="built_in">size</span>(Y))</span><br><span class="line">    [m, Index] = max(Y(:, <span class="built_in">i</span>));</span><br><span class="line">    result(<span class="built_in">i</span>) = Index;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result = result';</span><br></pre></td></tr></table></figure></p><p>总得来说这些分类器各有优点。因为一些原因暂时就不放上完整的结果和数据集了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现我学习机器学习的顺序不太对劲，之前先学了CNN和各种深度学习框架然后才开始看一些正常的分类器。。。不过话说回来，这样顺序导致我现在看这些分类器原理和实现轻松多了。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="分类器" scheme="http://yoursite.com/tags/%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>此篇没有标题</title>
    <link href="http://yoursite.com/2017/12/07/%E6%AD%A4%E7%AF%87%E6%B2%A1%E6%9C%89%E6%A0%87%E9%A2%98/"/>
    <id>http://yoursite.com/2017/12/07/此篇没有标题/</id>
    <published>2017-12-07T13:37:45.000Z</published>
    <updated>2017-12-07T17:33:40.117Z</updated>
    
    <content type="html"><![CDATA[<p>实验<a href="https://github.com/metalbubble/CAM" target="_blank" rel="noopener">CAM</a>的代码时候为了测试大量图片而写了点愚蠢的代码然后断断续续花了好几天Debug的故事。<br><a id="more"></a></p><p>不得不说有时候不写写代码还真的发现不了自己的思维死角。由于要测试大量图片，没仔细思考就直接在整个代码外套了个循环。。。。。。然后程序不断奔溃。-_-||</p><p>精简后的原代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br><span class="line">addpath(<span class="string">'/home/wcx/caffe/matlab'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> imgID=<span class="number">1</span>:<span class="number">1125</span></span><br><span class="line">    net_weights = [<span class="string">'models/imagenet_googleletCAM_train_iter_120000.caffemodel'</span>];</span><br><span class="line">    net_model = [<span class="string">'models/deploy_googlenetCAM.prototxt'</span>];</span><br><span class="line">    net = caffe.Net(net_model, net_weights, <span class="string">'test'</span>);</span><br><span class="line">    caffe.set_mode_gpu();</span><br><span class="line">    caffe.set_device(<span class="number">0</span>);</span><br><span class="line">    weights_LR = net.params(<span class="string">'CAM_fc'</span>,<span class="number">1</span>).get_data();</span><br><span class="line"></span><br><span class="line">    img = imread([<span class="string">'keyframe/'</span> num2str(imgID) <span class="string">'.png'</span>]);</span><br><span class="line">    [height_original,weight_original,temp]=<span class="built_in">size</span>(img);</span><br><span class="line">    img = imresize(img, [<span class="number">256</span> <span class="number">256</span>]);</span><br><span class="line">    scores = net.forward(&#123;prepare_image(img)&#125;);</span><br><span class="line">    activation_lastconv = net.blobs(<span class="string">'CAM_conv'</span>).get_data();</span><br><span class="line">    scores = scores&#123;<span class="number">1</span>&#125;;</span><br><span class="line">    caffe.reset_all();</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>老老实实设条件断点定位到每次崩溃停在<code>net = caffe.Net(net_model, net_weights, &#39;test&#39;)</code>。</p><p>然后瞬间怀疑是缓存冗余过多，试着加了clear但没有任何效果。于是看了一段时间matlab如何回收内存，学了许多骚操作，能用的一个都没。同时发现我clear位置还写错了，调整了下在每次循环前clear一下来清除工作空间，然而并没什么卵用。原本预想这样做会非常有用，因为每次循环结束都清除了工作空间和caffe网络，按道理效果和重新运行程序差不多了。后来在网上发现有人解释说matlab清除工作空间后虽然释放了内存，但释放后的空间是碎片化的，即使空间都释放了也没法装入比碎片大的内存块，我豁然开朗，觉得计组和操作系统还是很有用的。</p><p>然后在日常debug的时候瞥了下shell发现了点神奇的玩意：<br><code>Check failed: error == cudaSuccess (2 vs. 0) out of memory</code><br>这个<code>out of memory</code>很有意思，有了关键字后在stackoverflow上找到了个<a href="https://stackoverflow.com/questions/33790366/caffe-check-failed-error-cudasuccess-2-vs-0-out-of-memory#" target="_blank" rel="noopener">回答</a>。试着在shell下执行nvidia-smi，发现崩溃的时候Memory-Usage已经跑满了。</p><p>至此bug原因get，bug原因大概是循环中途多次重新加载网络，使得剩余内存越来越碎片化导致matlab不得不不断开辟新的内存空间直到GPU memory耗尽。然后改了循环后整个人都神清气爽了：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br><span class="line">addpath(<span class="string">'/home/wcx/caffe/matlab'</span>);</span><br><span class="line"></span><br><span class="line">net_weights = [<span class="string">'models/imagenet_googleletCAM_train_iter_120000.caffemodel'</span>];</span><br><span class="line">net_model = [<span class="string">'models/deploy_googlenetCAM.prototxt'</span>];</span><br><span class="line">net = caffe.Net(net_model, net_weights, <span class="string">'test'</span>);</span><br><span class="line">caffe.set_mode_gpu();</span><br><span class="line">caffe.set_device(<span class="number">0</span>);</span><br><span class="line">weights_LR = net.params(<span class="string">'CAM_fc'</span>,<span class="number">1</span>).get_data();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> imgID=<span class="number">1</span>:<span class="number">1125</span></span><br><span class="line">    img = imread([<span class="string">'keyframe/'</span> num2str(imgID) <span class="string">'.png'</span>]);</span><br><span class="line">    [height_original,weight_original,temp]=<span class="built_in">size</span>(img);</span><br><span class="line">    img = imresize(img, [<span class="number">256</span> <span class="number">256</span>]);</span><br><span class="line">    scores = net.forward(&#123;prepare_image(img)&#125;);</span><br><span class="line">    activation_lastconv = net.blobs(<span class="string">'CAM_conv'</span>).get_data();</span><br><span class="line">    scores = scores&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">caffe.reset_all();</span><br></pre></td></tr></table></figure></p><p>所以平时还是得多写写代码积累经验吧，唉。</p><p><strong>转载请注明原博客地址</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验&lt;a href=&quot;https://github.com/metalbubble/CAM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CAM&lt;/a&gt;的代码时候为了测试大量图片而写了点愚蠢的代码然后断断续续花了好几天Debug的故事。&lt;br&gt;
    
    </summary>
    
      <category term="日常" scheme="http://yoursite.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="Bug" scheme="http://yoursite.com/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>Github+hexo搭建博客（填坑）</title>
    <link href="http://yoursite.com/2017/11/24/Github+hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%A1%AB%E5%9D%91%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/24/Github+hexo搭建博客（填坑）/</id>
    <published>2017-11-24T15:17:25.000Z</published>
    <updated>2017-12-07T17:22:17.738Z</updated>
    
    <content type="html"><![CDATA[<p>总算是决定动手搭博客了。。。<br><a id="more"></a></p><p>目录</p><ul><li>前言<ul><li>准备工作</li><li>搭建过程</li></ul></li><li>填坑<ul><li>注册Github</li><li>创建仓库</li><li>配置SSH key</li><li>安装Hexo</li><li>配置Hexo</li><li>发布文章</li></ul></li><li>其他</li></ul><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><strong>1. 前言</strong></h1><p>搭博客前观望了很久，想来想去最后还是用了Github，不得不说用Github搭真的非常方便。要准备的东西不多，仅仅需要Github账号，Git客户端还有Node.js。网上有非常详细的搭建过程，这里就不详讲了，仅简单说下过程然后贴上我参考的博客：<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">手把手教你用Hexo+Github 搭建属于自己的博客</a>。</p><h2 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1. 准备工作"></a>1.1. 准备工作</h2><ul><li><a href="https://github.com/" target="_blank" rel="noopener">注册Github</a></li><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载Git</a></li><li><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">下载Node.js</a></li></ul><h2 id="1-2-搭建过程"><a href="#1-2-搭建过程" class="headerlink" title="1.2. 搭建过程"></a>1.2. 搭建过程</h2><ul><li>注册Github</li><li>创建仓库</li><li>配置SSH key</li><li>安装Hexo</li><li>配置Hexo</li><li>发布文章</li></ul><h1 id="2-填坑"><a href="#2-填坑" class="headerlink" title="2. 填坑"></a><strong>2. 填坑</strong></h1><h2 id="2-1-注册Github"><a href="#2-1-注册Github" class="headerlink" title="2.1. 注册Github"></a>2.1. 注册Github</h2><p>按照提示慢慢来就好，注册完后默认公开邮箱，如果想要隐藏自己的邮箱的话点自己头像找到Settings点进去。找打Emails选项，找到<code>Keep my email address private</code>并打勾，<code>Block command line pushes that expose my email</code>前面的勾取消，不取消的话会在部署的时候阻止部署并提示你的邮箱是private需要改成public等等。(神烦，找了一晚上才找打这个问题)</p><ul><li style="list-style: none"><input type="checkbox" checked> Keep my email address private</li><li style="list-style: none"><input type="checkbox"> Block command line pushes that expose my email</li></ul><h2 id="2-2-创建仓库"><a href="#2-2-创建仓库" class="headerlink" title="2.2 创建仓库"></a>2.2 创建仓库</h2><p>唯一需要注意的是仓库名严格按照<code>yourname.github.io</code>格式，其中<code>yourname</code>是自己的username，其他默认就行。</p><h2 id="2-3-配置SSH-key"><a href="#2-3-配置SSH-key" class="headerlink" title="2.3 配置SSH key"></a>2.3 配置SSH key</h2><p>注意要正确配置好SSH key防止部署Hexo时报错。<br>Bash下输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure></p><p>其中<code>username</code>与<code>email</code>是自己的Github用户名与邮箱。然后输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure></p><p>然后一路默认就好，最后将生成的公匙添加到github上。其他的详情见<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">Connecting to GitHub with SSH</a>。</p><h2 id="2-4-安装Hexo"><a href="#2-4-安装Hexo" class="headerlink" title="2.4 安装Hexo"></a>2.4 安装Hexo</h2><p>可能最麻烦的步骤就是这里了，因为官方源非常慢，经常下载一半停止，强行退出后需要<strong>强制</strong>清理下缓存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure></p><p>更改源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry &quot;https://registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure></p><p>安装<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官方文档</a>步骤安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>打开你要放博客的位置初始化Hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></p><p>该命令在当前路径下创建一个blog文件夹并在内完成初始化。进入blog文件夹安装Hexo扩展：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>到此Hexo就安装完了。blog里文件的详细介绍可以看<a href="https://hexo.io/docs/setup.html" target="_blank" rel="noopener">Hexo官方文档</a>。</p><h2 id="2-5-配置Hexo"><a href="#2-5-配置Hexo" class="headerlink" title="2.5 配置Hexo"></a>2.5 配置Hexo</h2><p>主要是修改<code>./blog</code>文件夹下的<code>_config.yml</code>文件里<code>Deployment</code>的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>前者为SSH形式，后者为https形式。</p><h2 id="2-6-发布文章"><a href="#2-6-发布文章" class="headerlink" title="2.6 发布文章"></a>2.6 发布文章</h2><p>首先安装扩展，防止发布文章时报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>用以下命令部署Hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; d -g</span><br></pre></td></tr></table></figure></p><p>第一次部署可能会让你登录Github，如果Github里设置了邮箱隐藏而且<code>Block command line pushes that expose my email</code>前面的勾未取消会导致部署被阻止。<br>发布文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;article&quot;</span><br></pre></td></tr></table></figure></p><p>在<code>./source/_posts</code>路径下将会看到<code>article.md</code>文件。编辑完该文件后需要重新部署：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a><strong>3. 其他</strong></h1><p>其他一些Hexo用法可以参照<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官方文档</a>，例如更换主题等。</p><p><strong>转载请注明原博客地址</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总算是决定动手搭博客了。。。&lt;br&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
</feed>
